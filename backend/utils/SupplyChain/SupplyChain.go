// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SupplyChain

import (
	"math/big"
	"strings"

	"github.com/FISCO-BCOS/go-sdk/abi"
	"github.com/FISCO-BCOS/go-sdk/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/core/types"
	"github.com/FISCO-BCOS/go-sdk/event"
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Struct4 is an auto generated low-level Go binding around an user-defined struct.
type Struct4 struct {
	Addr    common.Address
	Name    string
	Credit  *big.Int
	Funding *big.Int
}

// Struct0 is an auto generated low-level Go binding around an user-defined struct.
type Struct0 struct {
	Addr        common.Address
	Name        string
	CompanyType *big.Int
	Credit      *big.Int
	Funding     *big.Int
}

// Struct3 is an auto generated low-level Go binding around an user-defined struct.
type Struct3 struct {
	Addr           common.Address
	CreditProvided *big.Int
}

// Struct1 is an auto generated low-level Go binding around an user-defined struct.
type Struct1 struct {
	BillID      *big.Int
	From        common.Address
	To          common.Address
	Amount      *big.Int
	CreatedDate string
	EndDate     string
	Message     string
	Lock        *big.Int
	BillState   *big.Int
	BillType    *big.Int
}

// Struct2 is an auto generated low-level Go binding around an user-defined struct.
type Struct2 struct {
	TxID    *big.Int
	From    common.Address
	To      common.Address
	Amount  *big.Int
	Message string
	TxType  *big.Int
	TxState *big.Int
	BillID  *big.Int
}

// SupplyChainABI is the input ABI used to generate the binding from.
const SupplyChainABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"companyType\",\"type\":\"uint256\"}],\"name\":\"insertCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getBillTo\",\"outputs\":[{\"components\":[{\"name\":\"billID\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"createdDate\",\"type\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"lock\",\"type\":\"uint256\"},{\"name\":\"billState\",\"type\":\"uint256\"},{\"name\":\"billType\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getBillFrom\",\"outputs\":[{\"components\":[{\"name\":\"billID\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"createdDate\",\"type\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"lock\",\"type\":\"uint256\"},{\"name\":\"billState\",\"type\":\"uint256\"},{\"name\":\"billType\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bankAddr\",\"type\":\"address\"},{\"name\":\"txID\",\"type\":\"uint256\"},{\"name\":\"accepted\",\"type\":\"bool\"},{\"name\":\"createdDate\",\"type\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\"}],\"name\":\"confirmFinancing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operatorAddr\",\"type\":\"address\"},{\"name\":\"bankAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"useBill\",\"type\":\"bool\"},{\"name\":\"billID\",\"type\":\"uint256\"}],\"name\":\"financing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operatorAddr\",\"type\":\"address\"},{\"name\":\"billID\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTx\",\"outputs\":[{\"components\":[{\"name\":\"txID\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"txType\",\"type\":\"uint256\"},{\"name\":\"txState\",\"type\":\"uint256\"},{\"name\":\"billID\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoreCompanies\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"companyType\",\"type\":\"uint256\"},{\"name\":\"credit\",\"type\":\"uint256\"},{\"name\":\"funding\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCompanies\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"companyType\",\"type\":\"uint256\"},{\"name\":\"credit\",\"type\":\"uint256\"},{\"name\":\"funding\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMyTx\",\"outputs\":[{\"components\":[{\"name\":\"txID\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"txType\",\"type\":\"uint256\"},{\"name\":\"txState\",\"type\":\"uint256\"},{\"name\":\"billID\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRole\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCompany\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"companyType\",\"type\":\"uint256\"},{\"name\":\"credit\",\"type\":\"uint256\"},{\"name\":\"funding\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"creditProvided\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"billID\",\"type\":\"uint256\"}],\"name\":\"getBillByID\",\"outputs\":[{\"components\":[{\"name\":\"billID\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"createdDate\",\"type\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"lock\",\"type\":\"uint256\"},{\"name\":\"billState\",\"type\":\"uint256\"},{\"name\":\"billType\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllBills\",\"outputs\":[{\"components\":[{\"name\":\"billID\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"createdDate\",\"type\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"lock\",\"type\":\"uint256\"},{\"name\":\"billState\",\"type\":\"uint256\"},{\"name\":\"billType\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBank\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"credit\",\"type\":\"uint256\"},{\"name\":\"funding\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operatorAddr\",\"type\":\"address\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllBanks\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"credit\",\"type\":\"uint256\"},{\"name\":\"funding\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNormalCompanies\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"companyType\",\"type\":\"uint256\"},{\"name\":\"credit\",\"type\":\"uint256\"},{\"name\":\"funding\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operatorAddr\",\"type\":\"address\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"companyType\",\"type\":\"uint256\"}],\"name\":\"registration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"txID\",\"type\":\"uint256\"}],\"name\":\"getTxByID\",\"outputs\":[{\"components\":[{\"name\":\"txID\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"txType\",\"type\":\"uint256\"},{\"name\":\"txState\",\"type\":\"uint256\"},{\"name\":\"billID\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operatorAddr\",\"type\":\"address\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"provideCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operatorAddr\",\"type\":\"address\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"createdDate\",\"type\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\"}],\"name\":\"transferFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operatorAddr\",\"type\":\"address\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"provideFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operatorAddr\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"billID\",\"type\":\"uint256\"},{\"name\":\"createdDate\",\"type\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\"}],\"name\":\"transferBill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"adminAddr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operatorAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operatorAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProvideCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operatorAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProvideFunding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operatorAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operatorAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bankAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"useBill\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Financing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bankAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"ConfirmFinancing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operatorAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operatorAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"billID\",\"type\":\"uint256\"}],\"name\":\"TransferBill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operatorAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFunding\",\"type\":\"event\"}]"

// SupplyChainBin is the compiled bytecode used for deploying new contracts.
var SupplyChainBin = ""

// DeploySupplyChain deploys a new contract, binding an instance of SupplyChain to it.
func DeploySupplyChain(auth *bind.TransactOpts, backend bind.ContractBackend, adminAddr common.Address, name string) (common.Address, *types.Transaction, *SupplyChain, error) {
	parsed, err := abi.JSON(strings.NewReader(SupplyChainABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SupplyChainBin), backend, adminAddr, name)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SupplyChain{SupplyChainCaller: SupplyChainCaller{contract: contract}, SupplyChainTransactor: SupplyChainTransactor{contract: contract}, SupplyChainFilterer: SupplyChainFilterer{contract: contract}}, nil
}

func AsyncDeploySupplyChain(auth *bind.TransactOpts, handler func(*types.Receipt, error), backend bind.ContractBackend, adminAddr common.Address, name string) (*types.Transaction, error) {
	parsed, err := abi.JSON(strings.NewReader(SupplyChainABI))
	if err != nil {
		return nil, err
	}

	tx, err := bind.AsyncDeployContract(auth, handler, parsed, common.FromHex(SupplyChainBin), backend, adminAddr, name)
	if err != nil {
		return nil, err
	}
	return tx, nil
}

// SupplyChain is an auto generated Go binding around a Solidity contract.
type SupplyChain struct {
	SupplyChainCaller     // Read-only binding to the contract
	SupplyChainTransactor // Write-only binding to the contract
	SupplyChainFilterer   // Log filterer for contract events
}

// SupplyChainCaller is an auto generated read-only Go binding around a Solidity contract.
type SupplyChainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SupplyChainTransactor is an auto generated write-only Go binding around a Solidity contract.
type SupplyChainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SupplyChainFilterer is an auto generated log filtering Go binding around a Solidity contract events.
type SupplyChainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SupplyChainSession is an auto generated Go binding around a Solidity contract,
// with pre-set call and transact options.
type SupplyChainSession struct {
	Contract     *SupplyChain      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SupplyChainCallerSession is an auto generated read-only Go binding around a Solidity contract,
// with pre-set call options.
type SupplyChainCallerSession struct {
	Contract *SupplyChainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// SupplyChainTransactorSession is an auto generated write-only Go binding around a Solidity contract,
// with pre-set transact options.
type SupplyChainTransactorSession struct {
	Contract     *SupplyChainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// SupplyChainRaw is an auto generated low-level Go binding around a Solidity contract.
type SupplyChainRaw struct {
	Contract *SupplyChain // Generic contract binding to access the raw methods on
}

// SupplyChainCallerRaw is an auto generated low-level read-only Go binding around a Solidity contract.
type SupplyChainCallerRaw struct {
	Contract *SupplyChainCaller // Generic read-only contract binding to access the raw methods on
}

// SupplyChainTransactorRaw is an auto generated low-level write-only Go binding around a Solidity contract.
type SupplyChainTransactorRaw struct {
	Contract *SupplyChainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSupplyChain creates a new instance of SupplyChain, bound to a specific deployed contract.
func NewSupplyChain(address common.Address, backend bind.ContractBackend) (*SupplyChain, error) {
	contract, err := bindSupplyChain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SupplyChain{SupplyChainCaller: SupplyChainCaller{contract: contract}, SupplyChainTransactor: SupplyChainTransactor{contract: contract}, SupplyChainFilterer: SupplyChainFilterer{contract: contract}}, nil
}

// NewSupplyChainCaller creates a new read-only instance of SupplyChain, bound to a specific deployed contract.
func NewSupplyChainCaller(address common.Address, caller bind.ContractCaller) (*SupplyChainCaller, error) {
	contract, err := bindSupplyChain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SupplyChainCaller{contract: contract}, nil
}

// NewSupplyChainTransactor creates a new write-only instance of SupplyChain, bound to a specific deployed contract.
func NewSupplyChainTransactor(address common.Address, transactor bind.ContractTransactor) (*SupplyChainTransactor, error) {
	contract, err := bindSupplyChain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SupplyChainTransactor{contract: contract}, nil
}

// NewSupplyChainFilterer creates a new log filterer instance of SupplyChain, bound to a specific deployed contract.
func NewSupplyChainFilterer(address common.Address, filterer bind.ContractFilterer) (*SupplyChainFilterer, error) {
	contract, err := bindSupplyChain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SupplyChainFilterer{contract: contract}, nil
}

// bindSupplyChain binds a generic wrapper to an already deployed contract.
func bindSupplyChain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SupplyChainABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SupplyChain *SupplyChainRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SupplyChain.Contract.SupplyChainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SupplyChain *SupplyChainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.SupplyChainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SupplyChain *SupplyChainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.SupplyChainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SupplyChain *SupplyChainCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SupplyChain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SupplyChain *SupplyChainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SupplyChain *SupplyChainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() constant returns(Struct3)
func (_SupplyChain *SupplyChainCaller) GetAdmin(opts *bind.CallOpts) (Struct3, error) {
	var (
		ret0 = new(Struct3)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getAdmin")
	return *ret0, err
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() constant returns(Struct3)
func (_SupplyChain *SupplyChainSession) GetAdmin() (Struct3, error) {
	return _SupplyChain.Contract.GetAdmin(&_SupplyChain.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() constant returns(Struct3)
func (_SupplyChain *SupplyChainCallerSession) GetAdmin() (Struct3, error) {
	return _SupplyChain.Contract.GetAdmin(&_SupplyChain.CallOpts)
}

// GetAllBanks is a free data retrieval call binding the contract method 0x951c8a07.
//
// Solidity: function getAllBanks() constant returns([]Struct4)
func (_SupplyChain *SupplyChainCaller) GetAllBanks(opts *bind.CallOpts) ([]Struct4, error) {
	var (
		ret0 = new([]Struct4)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getAllBanks")
	return *ret0, err
}

// GetAllBanks is a free data retrieval call binding the contract method 0x951c8a07.
//
// Solidity: function getAllBanks() constant returns([]Struct4)
func (_SupplyChain *SupplyChainSession) GetAllBanks() ([]Struct4, error) {
	return _SupplyChain.Contract.GetAllBanks(&_SupplyChain.CallOpts)
}

// GetAllBanks is a free data retrieval call binding the contract method 0x951c8a07.
//
// Solidity: function getAllBanks() constant returns([]Struct4)
func (_SupplyChain *SupplyChainCallerSession) GetAllBanks() ([]Struct4, error) {
	return _SupplyChain.Contract.GetAllBanks(&_SupplyChain.CallOpts)
}

// GetAllBills is a free data retrieval call binding the contract method 0x818e1f1a.
//
// Solidity: function getAllBills() constant returns([]Struct1)
func (_SupplyChain *SupplyChainCaller) GetAllBills(opts *bind.CallOpts) ([]Struct1, error) {
	var (
		ret0 = new([]Struct1)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getAllBills")
	return *ret0, err
}

// GetAllBills is a free data retrieval call binding the contract method 0x818e1f1a.
//
// Solidity: function getAllBills() constant returns([]Struct1)
func (_SupplyChain *SupplyChainSession) GetAllBills() ([]Struct1, error) {
	return _SupplyChain.Contract.GetAllBills(&_SupplyChain.CallOpts)
}

// GetAllBills is a free data retrieval call binding the contract method 0x818e1f1a.
//
// Solidity: function getAllBills() constant returns([]Struct1)
func (_SupplyChain *SupplyChainCallerSession) GetAllBills() ([]Struct1, error) {
	return _SupplyChain.Contract.GetAllBills(&_SupplyChain.CallOpts)
}

// GetAllCompanies is a free data retrieval call binding the contract method 0x408bf4c3.
//
// Solidity: function getAllCompanies() constant returns([]Struct0)
func (_SupplyChain *SupplyChainCaller) GetAllCompanies(opts *bind.CallOpts) ([]Struct0, error) {
	var (
		ret0 = new([]Struct0)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getAllCompanies")
	return *ret0, err
}

// GetAllCompanies is a free data retrieval call binding the contract method 0x408bf4c3.
//
// Solidity: function getAllCompanies() constant returns([]Struct0)
func (_SupplyChain *SupplyChainSession) GetAllCompanies() ([]Struct0, error) {
	return _SupplyChain.Contract.GetAllCompanies(&_SupplyChain.CallOpts)
}

// GetAllCompanies is a free data retrieval call binding the contract method 0x408bf4c3.
//
// Solidity: function getAllCompanies() constant returns([]Struct0)
func (_SupplyChain *SupplyChainCallerSession) GetAllCompanies() ([]Struct0, error) {
	return _SupplyChain.Contract.GetAllCompanies(&_SupplyChain.CallOpts)
}

// GetAllTx is a free data retrieval call binding the contract method 0x271b93ce.
//
// Solidity: function getAllTx() constant returns([]Struct2)
func (_SupplyChain *SupplyChainCaller) GetAllTx(opts *bind.CallOpts) ([]Struct2, error) {
	var (
		ret0 = new([]Struct2)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getAllTx")
	return *ret0, err
}

// GetAllTx is a free data retrieval call binding the contract method 0x271b93ce.
//
// Solidity: function getAllTx() constant returns([]Struct2)
func (_SupplyChain *SupplyChainSession) GetAllTx() ([]Struct2, error) {
	return _SupplyChain.Contract.GetAllTx(&_SupplyChain.CallOpts)
}

// GetAllTx is a free data retrieval call binding the contract method 0x271b93ce.
//
// Solidity: function getAllTx() constant returns([]Struct2)
func (_SupplyChain *SupplyChainCallerSession) GetAllTx() ([]Struct2, error) {
	return _SupplyChain.Contract.GetAllTx(&_SupplyChain.CallOpts)
}

// GetBank is a free data retrieval call binding the contract method 0x83e0c31d.
//
// Solidity: function getBank(address addr) constant returns(Struct4)
func (_SupplyChain *SupplyChainCaller) GetBank(opts *bind.CallOpts, addr common.Address) (Struct4, error) {
	var (
		ret0 = new(Struct4)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getBank", addr)
	return *ret0, err
}

// GetBank is a free data retrieval call binding the contract method 0x83e0c31d.
//
// Solidity: function getBank(address addr) constant returns(Struct4)
func (_SupplyChain *SupplyChainSession) GetBank(addr common.Address) (Struct4, error) {
	return _SupplyChain.Contract.GetBank(&_SupplyChain.CallOpts, addr)
}

// GetBank is a free data retrieval call binding the contract method 0x83e0c31d.
//
// Solidity: function getBank(address addr) constant returns(Struct4)
func (_SupplyChain *SupplyChainCallerSession) GetBank(addr common.Address) (Struct4, error) {
	return _SupplyChain.Contract.GetBank(&_SupplyChain.CallOpts, addr)
}

// GetBillByID is a free data retrieval call binding the contract method 0x776875c7.
//
// Solidity: function getBillByID(uint256 billID) constant returns(Struct1)
func (_SupplyChain *SupplyChainCaller) GetBillByID(opts *bind.CallOpts, billID *big.Int) (Struct1, error) {
	var (
		ret0 = new(Struct1)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getBillByID", billID)
	return *ret0, err
}

// GetBillByID is a free data retrieval call binding the contract method 0x776875c7.
//
// Solidity: function getBillByID(uint256 billID) constant returns(Struct1)
func (_SupplyChain *SupplyChainSession) GetBillByID(billID *big.Int) (Struct1, error) {
	return _SupplyChain.Contract.GetBillByID(&_SupplyChain.CallOpts, billID)
}

// GetBillByID is a free data retrieval call binding the contract method 0x776875c7.
//
// Solidity: function getBillByID(uint256 billID) constant returns(Struct1)
func (_SupplyChain *SupplyChainCallerSession) GetBillByID(billID *big.Int) (Struct1, error) {
	return _SupplyChain.Contract.GetBillByID(&_SupplyChain.CallOpts, billID)
}

// GetBillFrom is a free data retrieval call binding the contract method 0x049dae2c.
//
// Solidity: function getBillFrom(address from) constant returns([]Struct1)
func (_SupplyChain *SupplyChainCaller) GetBillFrom(opts *bind.CallOpts, from common.Address) ([]Struct1, error) {
	var (
		ret0 = new([]Struct1)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getBillFrom", from)
	return *ret0, err
}

// GetBillFrom is a free data retrieval call binding the contract method 0x049dae2c.
//
// Solidity: function getBillFrom(address from) constant returns([]Struct1)
func (_SupplyChain *SupplyChainSession) GetBillFrom(from common.Address) ([]Struct1, error) {
	return _SupplyChain.Contract.GetBillFrom(&_SupplyChain.CallOpts, from)
}

// GetBillFrom is a free data retrieval call binding the contract method 0x049dae2c.
//
// Solidity: function getBillFrom(address from) constant returns([]Struct1)
func (_SupplyChain *SupplyChainCallerSession) GetBillFrom(from common.Address) ([]Struct1, error) {
	return _SupplyChain.Contract.GetBillFrom(&_SupplyChain.CallOpts, from)
}

// GetBillTo is a free data retrieval call binding the contract method 0x03191d22.
//
// Solidity: function getBillTo(address to) constant returns([]Struct1)
func (_SupplyChain *SupplyChainCaller) GetBillTo(opts *bind.CallOpts, to common.Address) ([]Struct1, error) {
	var (
		ret0 = new([]Struct1)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getBillTo", to)
	return *ret0, err
}

// GetBillTo is a free data retrieval call binding the contract method 0x03191d22.
//
// Solidity: function getBillTo(address to) constant returns([]Struct1)
func (_SupplyChain *SupplyChainSession) GetBillTo(to common.Address) ([]Struct1, error) {
	return _SupplyChain.Contract.GetBillTo(&_SupplyChain.CallOpts, to)
}

// GetBillTo is a free data retrieval call binding the contract method 0x03191d22.
//
// Solidity: function getBillTo(address to) constant returns([]Struct1)
func (_SupplyChain *SupplyChainCallerSession) GetBillTo(to common.Address) ([]Struct1, error) {
	return _SupplyChain.Contract.GetBillTo(&_SupplyChain.CallOpts, to)
}

// GetCompany is a free data retrieval call binding the contract method 0x62bc56e6.
//
// Solidity: function getCompany(address addr) constant returns(Struct0)
func (_SupplyChain *SupplyChainCaller) GetCompany(opts *bind.CallOpts, addr common.Address) (Struct0, error) {
	var (
		ret0 = new(Struct0)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getCompany", addr)
	return *ret0, err
}

// GetCompany is a free data retrieval call binding the contract method 0x62bc56e6.
//
// Solidity: function getCompany(address addr) constant returns(Struct0)
func (_SupplyChain *SupplyChainSession) GetCompany(addr common.Address) (Struct0, error) {
	return _SupplyChain.Contract.GetCompany(&_SupplyChain.CallOpts, addr)
}

// GetCompany is a free data retrieval call binding the contract method 0x62bc56e6.
//
// Solidity: function getCompany(address addr) constant returns(Struct0)
func (_SupplyChain *SupplyChainCallerSession) GetCompany(addr common.Address) (Struct0, error) {
	return _SupplyChain.Contract.GetCompany(&_SupplyChain.CallOpts, addr)
}

// GetCoreCompanies is a free data retrieval call binding the contract method 0x275c7a68.
//
// Solidity: function getCoreCompanies() constant returns([]Struct0)
func (_SupplyChain *SupplyChainCaller) GetCoreCompanies(opts *bind.CallOpts) ([]Struct0, error) {
	var (
		ret0 = new([]Struct0)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getCoreCompanies")
	return *ret0, err
}

// GetCoreCompanies is a free data retrieval call binding the contract method 0x275c7a68.
//
// Solidity: function getCoreCompanies() constant returns([]Struct0)
func (_SupplyChain *SupplyChainSession) GetCoreCompanies() ([]Struct0, error) {
	return _SupplyChain.Contract.GetCoreCompanies(&_SupplyChain.CallOpts)
}

// GetCoreCompanies is a free data retrieval call binding the contract method 0x275c7a68.
//
// Solidity: function getCoreCompanies() constant returns([]Struct0)
func (_SupplyChain *SupplyChainCallerSession) GetCoreCompanies() ([]Struct0, error) {
	return _SupplyChain.Contract.GetCoreCompanies(&_SupplyChain.CallOpts)
}

// GetMyTx is a free data retrieval call binding the contract method 0x41a262a9.
//
// Solidity: function getMyTx(address addr) constant returns([]Struct2)
func (_SupplyChain *SupplyChainCaller) GetMyTx(opts *bind.CallOpts, addr common.Address) ([]Struct2, error) {
	var (
		ret0 = new([]Struct2)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getMyTx", addr)
	return *ret0, err
}

// GetMyTx is a free data retrieval call binding the contract method 0x41a262a9.
//
// Solidity: function getMyTx(address addr) constant returns([]Struct2)
func (_SupplyChain *SupplyChainSession) GetMyTx(addr common.Address) ([]Struct2, error) {
	return _SupplyChain.Contract.GetMyTx(&_SupplyChain.CallOpts, addr)
}

// GetMyTx is a free data retrieval call binding the contract method 0x41a262a9.
//
// Solidity: function getMyTx(address addr) constant returns([]Struct2)
func (_SupplyChain *SupplyChainCallerSession) GetMyTx(addr common.Address) ([]Struct2, error) {
	return _SupplyChain.Contract.GetMyTx(&_SupplyChain.CallOpts, addr)
}

// GetNormalCompanies is a free data retrieval call binding the contract method 0xa2c1ea14.
//
// Solidity: function getNormalCompanies() constant returns([]Struct0)
func (_SupplyChain *SupplyChainCaller) GetNormalCompanies(opts *bind.CallOpts) ([]Struct0, error) {
	var (
		ret0 = new([]Struct0)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getNormalCompanies")
	return *ret0, err
}

// GetNormalCompanies is a free data retrieval call binding the contract method 0xa2c1ea14.
//
// Solidity: function getNormalCompanies() constant returns([]Struct0)
func (_SupplyChain *SupplyChainSession) GetNormalCompanies() ([]Struct0, error) {
	return _SupplyChain.Contract.GetNormalCompanies(&_SupplyChain.CallOpts)
}

// GetNormalCompanies is a free data retrieval call binding the contract method 0xa2c1ea14.
//
// Solidity: function getNormalCompanies() constant returns([]Struct0)
func (_SupplyChain *SupplyChainCallerSession) GetNormalCompanies() ([]Struct0, error) {
	return _SupplyChain.Contract.GetNormalCompanies(&_SupplyChain.CallOpts)
}

// GetRole is a free data retrieval call binding the contract method 0x44276733.
//
// Solidity: function getRole(address addr) constant returns(string)
func (_SupplyChain *SupplyChainCaller) GetRole(opts *bind.CallOpts, addr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getRole", addr)
	return *ret0, err
}

// GetRole is a free data retrieval call binding the contract method 0x44276733.
//
// Solidity: function getRole(address addr) constant returns(string)
func (_SupplyChain *SupplyChainSession) GetRole(addr common.Address) (string, error) {
	return _SupplyChain.Contract.GetRole(&_SupplyChain.CallOpts, addr)
}

// GetRole is a free data retrieval call binding the contract method 0x44276733.
//
// Solidity: function getRole(address addr) constant returns(string)
func (_SupplyChain *SupplyChainCallerSession) GetRole(addr common.Address) (string, error) {
	return _SupplyChain.Contract.GetRole(&_SupplyChain.CallOpts, addr)
}

// GetTxByID is a free data retrieval call binding the contract method 0xbeed1420.
//
// Solidity: function getTxByID(uint256 txID) constant returns(Struct2)
func (_SupplyChain *SupplyChainCaller) GetTxByID(opts *bind.CallOpts, txID *big.Int) (Struct2, error) {
	var (
		ret0 = new(Struct2)
	)
	out := ret0
	err := _SupplyChain.contract.Call(opts, out, "getTxByID", txID)
	return *ret0, err
}

// GetTxByID is a free data retrieval call binding the contract method 0xbeed1420.
//
// Solidity: function getTxByID(uint256 txID) constant returns(Struct2)
func (_SupplyChain *SupplyChainSession) GetTxByID(txID *big.Int) (Struct2, error) {
	return _SupplyChain.Contract.GetTxByID(&_SupplyChain.CallOpts, txID)
}

// GetTxByID is a free data retrieval call binding the contract method 0xbeed1420.
//
// Solidity: function getTxByID(uint256 txID) constant returns(Struct2)
func (_SupplyChain *SupplyChainCallerSession) GetTxByID(txID *big.Int) (Struct2, error) {
	return _SupplyChain.Contract.GetTxByID(&_SupplyChain.CallOpts, txID)
}

// ConfirmFinancing is a paid mutator transaction binding the contract method 0x0c112d18.
//
// Solidity: function confirmFinancing(address bankAddr, uint256 txID, bool accepted, string createdDate, string endDate) returns()
func (_SupplyChain *SupplyChainTransactor) ConfirmFinancing(opts *bind.TransactOpts, bankAddr common.Address, txID *big.Int, accepted bool, createdDate string, endDate string) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.contract.Transact(opts, "confirmFinancing", bankAddr, txID, accepted, createdDate, endDate)
}

func (_SupplyChain *SupplyChainTransactor) AsyncConfirmFinancing(handler func(*types.Receipt, error), opts *bind.TransactOpts, bankAddr common.Address, txID *big.Int, accepted bool, createdDate string, endDate string) (*types.Transaction, error) {
	return _SupplyChain.contract.AsyncTransact(opts, handler, "confirmFinancing", bankAddr, txID, accepted, createdDate, endDate)
}

// ConfirmFinancing is a paid mutator transaction binding the contract method 0x0c112d18.
//
// Solidity: function confirmFinancing(address bankAddr, uint256 txID, bool accepted, string createdDate, string endDate) returns()
func (_SupplyChain *SupplyChainSession) ConfirmFinancing(bankAddr common.Address, txID *big.Int, accepted bool, createdDate string, endDate string) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.ConfirmFinancing(&_SupplyChain.TransactOpts, bankAddr, txID, accepted, createdDate, endDate)
}

func (_SupplyChain *SupplyChainSession) AsyncConfirmFinancing(handler func(*types.Receipt, error), bankAddr common.Address, txID *big.Int, accepted bool, createdDate string, endDate string) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncConfirmFinancing(handler, &_SupplyChain.TransactOpts, bankAddr, txID, accepted, createdDate, endDate)
}

// ConfirmFinancing is a paid mutator transaction binding the contract method 0x0c112d18.
//
// Solidity: function confirmFinancing(address bankAddr, uint256 txID, bool accepted, string createdDate, string endDate) returns()
func (_SupplyChain *SupplyChainTransactorSession) ConfirmFinancing(bankAddr common.Address, txID *big.Int, accepted bool, createdDate string, endDate string) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.ConfirmFinancing(&_SupplyChain.TransactOpts, bankAddr, txID, accepted, createdDate, endDate)
}

func (_SupplyChain *SupplyChainTransactorSession) AsyncConfirmFinancing(handler func(*types.Receipt, error), bankAddr common.Address, txID *big.Int, accepted bool, createdDate string, endDate string) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncConfirmFinancing(handler, &_SupplyChain.TransactOpts, bankAddr, txID, accepted, createdDate, endDate)
}

// Financing is a paid mutator transaction binding the contract method 0x17ec8fb6.
//
// Solidity: function financing(address operatorAddr, address bankAddr, uint256 amount, string message, bool useBill, uint256 billID) returns()
func (_SupplyChain *SupplyChainTransactor) Financing(opts *bind.TransactOpts, operatorAddr common.Address, bankAddr common.Address, amount *big.Int, message string, useBill bool, billID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.contract.Transact(opts, "financing", operatorAddr, bankAddr, amount, message, useBill, billID)
}

func (_SupplyChain *SupplyChainTransactor) AsyncFinancing(handler func(*types.Receipt, error), opts *bind.TransactOpts, operatorAddr common.Address, bankAddr common.Address, amount *big.Int, message string, useBill bool, billID *big.Int) (*types.Transaction, error) {
	return _SupplyChain.contract.AsyncTransact(opts, handler, "financing", operatorAddr, bankAddr, amount, message, useBill, billID)
}

// Financing is a paid mutator transaction binding the contract method 0x17ec8fb6.
//
// Solidity: function financing(address operatorAddr, address bankAddr, uint256 amount, string message, bool useBill, uint256 billID) returns()
func (_SupplyChain *SupplyChainSession) Financing(operatorAddr common.Address, bankAddr common.Address, amount *big.Int, message string, useBill bool, billID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.Financing(&_SupplyChain.TransactOpts, operatorAddr, bankAddr, amount, message, useBill, billID)
}

func (_SupplyChain *SupplyChainSession) AsyncFinancing(handler func(*types.Receipt, error), operatorAddr common.Address, bankAddr common.Address, amount *big.Int, message string, useBill bool, billID *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncFinancing(handler, &_SupplyChain.TransactOpts, operatorAddr, bankAddr, amount, message, useBill, billID)
}

// Financing is a paid mutator transaction binding the contract method 0x17ec8fb6.
//
// Solidity: function financing(address operatorAddr, address bankAddr, uint256 amount, string message, bool useBill, uint256 billID) returns()
func (_SupplyChain *SupplyChainTransactorSession) Financing(operatorAddr common.Address, bankAddr common.Address, amount *big.Int, message string, useBill bool, billID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.Financing(&_SupplyChain.TransactOpts, operatorAddr, bankAddr, amount, message, useBill, billID)
}

func (_SupplyChain *SupplyChainTransactorSession) AsyncFinancing(handler func(*types.Receipt, error), operatorAddr common.Address, bankAddr common.Address, amount *big.Int, message string, useBill bool, billID *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncFinancing(handler, &_SupplyChain.TransactOpts, operatorAddr, bankAddr, amount, message, useBill, billID)
}

// InsertCompany is a paid mutator transaction binding the contract method 0x000a3d03.
//
// Solidity: function insertCompany(address addr, string name, uint256 companyType) returns()
func (_SupplyChain *SupplyChainTransactor) InsertCompany(opts *bind.TransactOpts, addr common.Address, name string, companyType *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.contract.Transact(opts, "insertCompany", addr, name, companyType)
}

func (_SupplyChain *SupplyChainTransactor) AsyncInsertCompany(handler func(*types.Receipt, error), opts *bind.TransactOpts, addr common.Address, name string, companyType *big.Int) (*types.Transaction, error) {
	return _SupplyChain.contract.AsyncTransact(opts, handler, "insertCompany", addr, name, companyType)
}

// InsertCompany is a paid mutator transaction binding the contract method 0x000a3d03.
//
// Solidity: function insertCompany(address addr, string name, uint256 companyType) returns()
func (_SupplyChain *SupplyChainSession) InsertCompany(addr common.Address, name string, companyType *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.InsertCompany(&_SupplyChain.TransactOpts, addr, name, companyType)
}

func (_SupplyChain *SupplyChainSession) AsyncInsertCompany(handler func(*types.Receipt, error), addr common.Address, name string, companyType *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncInsertCompany(handler, &_SupplyChain.TransactOpts, addr, name, companyType)
}

// InsertCompany is a paid mutator transaction binding the contract method 0x000a3d03.
//
// Solidity: function insertCompany(address addr, string name, uint256 companyType) returns()
func (_SupplyChain *SupplyChainTransactorSession) InsertCompany(addr common.Address, name string, companyType *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.InsertCompany(&_SupplyChain.TransactOpts, addr, name, companyType)
}

func (_SupplyChain *SupplyChainTransactorSession) AsyncInsertCompany(handler func(*types.Receipt, error), addr common.Address, name string, companyType *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncInsertCompany(handler, &_SupplyChain.TransactOpts, addr, name, companyType)
}

// ProvideCredit is a paid mutator transaction binding the contract method 0xbf6a8450.
//
// Solidity: function provideCredit(address operatorAddr, address addr, uint256 amount) returns()
func (_SupplyChain *SupplyChainTransactor) ProvideCredit(opts *bind.TransactOpts, operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.contract.Transact(opts, "provideCredit", operatorAddr, addr, amount)
}

func (_SupplyChain *SupplyChainTransactor) AsyncProvideCredit(handler func(*types.Receipt, error), opts *bind.TransactOpts, operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyChain.contract.AsyncTransact(opts, handler, "provideCredit", operatorAddr, addr, amount)
}

// ProvideCredit is a paid mutator transaction binding the contract method 0xbf6a8450.
//
// Solidity: function provideCredit(address operatorAddr, address addr, uint256 amount) returns()
func (_SupplyChain *SupplyChainSession) ProvideCredit(operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.ProvideCredit(&_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

func (_SupplyChain *SupplyChainSession) AsyncProvideCredit(handler func(*types.Receipt, error), operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncProvideCredit(handler, &_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

// ProvideCredit is a paid mutator transaction binding the contract method 0xbf6a8450.
//
// Solidity: function provideCredit(address operatorAddr, address addr, uint256 amount) returns()
func (_SupplyChain *SupplyChainTransactorSession) ProvideCredit(operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.ProvideCredit(&_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

func (_SupplyChain *SupplyChainTransactorSession) AsyncProvideCredit(handler func(*types.Receipt, error), operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncProvideCredit(handler, &_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

// ProvideFunding is a paid mutator transaction binding the contract method 0xe5b64eb0.
//
// Solidity: function provideFunding(address operatorAddr, address addr, uint256 amount) returns()
func (_SupplyChain *SupplyChainTransactor) ProvideFunding(opts *bind.TransactOpts, operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.contract.Transact(opts, "provideFunding", operatorAddr, addr, amount)
}

func (_SupplyChain *SupplyChainTransactor) AsyncProvideFunding(handler func(*types.Receipt, error), opts *bind.TransactOpts, operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyChain.contract.AsyncTransact(opts, handler, "provideFunding", operatorAddr, addr, amount)
}

// ProvideFunding is a paid mutator transaction binding the contract method 0xe5b64eb0.
//
// Solidity: function provideFunding(address operatorAddr, address addr, uint256 amount) returns()
func (_SupplyChain *SupplyChainSession) ProvideFunding(operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.ProvideFunding(&_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

func (_SupplyChain *SupplyChainSession) AsyncProvideFunding(handler func(*types.Receipt, error), operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncProvideFunding(handler, &_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

// ProvideFunding is a paid mutator transaction binding the contract method 0xe5b64eb0.
//
// Solidity: function provideFunding(address operatorAddr, address addr, uint256 amount) returns()
func (_SupplyChain *SupplyChainTransactorSession) ProvideFunding(operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.ProvideFunding(&_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

func (_SupplyChain *SupplyChainTransactorSession) AsyncProvideFunding(handler func(*types.Receipt, error), operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncProvideFunding(handler, &_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

// Registration is a paid mutator transaction binding the contract method 0xb5bcf029.
//
// Solidity: function registration(address operatorAddr, address addr, string role, string name, uint256 companyType) returns()
func (_SupplyChain *SupplyChainTransactor) Registration(opts *bind.TransactOpts, operatorAddr common.Address, addr common.Address, role string, name string, companyType *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.contract.Transact(opts, "registration", operatorAddr, addr, role, name, companyType)
}

func (_SupplyChain *SupplyChainTransactor) AsyncRegistration(handler func(*types.Receipt, error), opts *bind.TransactOpts, operatorAddr common.Address, addr common.Address, role string, name string, companyType *big.Int) (*types.Transaction, error) {
	return _SupplyChain.contract.AsyncTransact(opts, handler, "registration", operatorAddr, addr, role, name, companyType)
}

// Registration is a paid mutator transaction binding the contract method 0xb5bcf029.
//
// Solidity: function registration(address operatorAddr, address addr, string role, string name, uint256 companyType) returns()
func (_SupplyChain *SupplyChainSession) Registration(operatorAddr common.Address, addr common.Address, role string, name string, companyType *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.Registration(&_SupplyChain.TransactOpts, operatorAddr, addr, role, name, companyType)
}

func (_SupplyChain *SupplyChainSession) AsyncRegistration(handler func(*types.Receipt, error), operatorAddr common.Address, addr common.Address, role string, name string, companyType *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncRegistration(handler, &_SupplyChain.TransactOpts, operatorAddr, addr, role, name, companyType)
}

// Registration is a paid mutator transaction binding the contract method 0xb5bcf029.
//
// Solidity: function registration(address operatorAddr, address addr, string role, string name, uint256 companyType) returns()
func (_SupplyChain *SupplyChainTransactorSession) Registration(operatorAddr common.Address, addr common.Address, role string, name string, companyType *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.Registration(&_SupplyChain.TransactOpts, operatorAddr, addr, role, name, companyType)
}

func (_SupplyChain *SupplyChainTransactorSession) AsyncRegistration(handler func(*types.Receipt, error), operatorAddr common.Address, addr common.Address, role string, name string, companyType *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncRegistration(handler, &_SupplyChain.TransactOpts, operatorAddr, addr, role, name, companyType)
}

// Repay is a paid mutator transaction binding the contract method 0x22867d78.
//
// Solidity: function repay(address operatorAddr, uint256 billID) returns()
func (_SupplyChain *SupplyChainTransactor) Repay(opts *bind.TransactOpts, operatorAddr common.Address, billID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.contract.Transact(opts, "repay", operatorAddr, billID)
}

func (_SupplyChain *SupplyChainTransactor) AsyncRepay(handler func(*types.Receipt, error), opts *bind.TransactOpts, operatorAddr common.Address, billID *big.Int) (*types.Transaction, error) {
	return _SupplyChain.contract.AsyncTransact(opts, handler, "repay", operatorAddr, billID)
}

// Repay is a paid mutator transaction binding the contract method 0x22867d78.
//
// Solidity: function repay(address operatorAddr, uint256 billID) returns()
func (_SupplyChain *SupplyChainSession) Repay(operatorAddr common.Address, billID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.Repay(&_SupplyChain.TransactOpts, operatorAddr, billID)
}

func (_SupplyChain *SupplyChainSession) AsyncRepay(handler func(*types.Receipt, error), operatorAddr common.Address, billID *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncRepay(handler, &_SupplyChain.TransactOpts, operatorAddr, billID)
}

// Repay is a paid mutator transaction binding the contract method 0x22867d78.
//
// Solidity: function repay(address operatorAddr, uint256 billID) returns()
func (_SupplyChain *SupplyChainTransactorSession) Repay(operatorAddr common.Address, billID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.Repay(&_SupplyChain.TransactOpts, operatorAddr, billID)
}

func (_SupplyChain *SupplyChainTransactorSession) AsyncRepay(handler func(*types.Receipt, error), operatorAddr common.Address, billID *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncRepay(handler, &_SupplyChain.TransactOpts, operatorAddr, billID)
}

// TransferBill is a paid mutator transaction binding the contract method 0xeb03701f.
//
// Solidity: function transferBill(address operatorAddr, address to, uint256 amount, string message, uint256 billID, string createdDate, string endDate) returns()
func (_SupplyChain *SupplyChainTransactor) TransferBill(opts *bind.TransactOpts, operatorAddr common.Address, to common.Address, amount *big.Int, message string, billID *big.Int, createdDate string, endDate string) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.contract.Transact(opts, "transferBill", operatorAddr, to, amount, message, billID, createdDate, endDate)
}

func (_SupplyChain *SupplyChainTransactor) AsyncTransferBill(handler func(*types.Receipt, error), opts *bind.TransactOpts, operatorAddr common.Address, to common.Address, amount *big.Int, message string, billID *big.Int, createdDate string, endDate string) (*types.Transaction, error) {
	return _SupplyChain.contract.AsyncTransact(opts, handler, "transferBill", operatorAddr, to, amount, message, billID, createdDate, endDate)
}

// TransferBill is a paid mutator transaction binding the contract method 0xeb03701f.
//
// Solidity: function transferBill(address operatorAddr, address to, uint256 amount, string message, uint256 billID, string createdDate, string endDate) returns()
func (_SupplyChain *SupplyChainSession) TransferBill(operatorAddr common.Address, to common.Address, amount *big.Int, message string, billID *big.Int, createdDate string, endDate string) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.TransferBill(&_SupplyChain.TransactOpts, operatorAddr, to, amount, message, billID, createdDate, endDate)
}

func (_SupplyChain *SupplyChainSession) AsyncTransferBill(handler func(*types.Receipt, error), operatorAddr common.Address, to common.Address, amount *big.Int, message string, billID *big.Int, createdDate string, endDate string) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncTransferBill(handler, &_SupplyChain.TransactOpts, operatorAddr, to, amount, message, billID, createdDate, endDate)
}

// TransferBill is a paid mutator transaction binding the contract method 0xeb03701f.
//
// Solidity: function transferBill(address operatorAddr, address to, uint256 amount, string message, uint256 billID, string createdDate, string endDate) returns()
func (_SupplyChain *SupplyChainTransactorSession) TransferBill(operatorAddr common.Address, to common.Address, amount *big.Int, message string, billID *big.Int, createdDate string, endDate string) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.TransferBill(&_SupplyChain.TransactOpts, operatorAddr, to, amount, message, billID, createdDate, endDate)
}

func (_SupplyChain *SupplyChainTransactorSession) AsyncTransferBill(handler func(*types.Receipt, error), operatorAddr common.Address, to common.Address, amount *big.Int, message string, billID *big.Int, createdDate string, endDate string) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncTransferBill(handler, &_SupplyChain.TransactOpts, operatorAddr, to, amount, message, billID, createdDate, endDate)
}

// TransferFunding is a paid mutator transaction binding the contract method 0xe4541186.
//
// Solidity: function transferFunding(address operatorAddr, address addr, uint256 amount, string message, string createdDate, string endDate) returns()
func (_SupplyChain *SupplyChainTransactor) TransferFunding(opts *bind.TransactOpts, operatorAddr common.Address, addr common.Address, amount *big.Int, message string, createdDate string, endDate string) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.contract.Transact(opts, "transferFunding", operatorAddr, addr, amount, message, createdDate, endDate)
}

func (_SupplyChain *SupplyChainTransactor) AsyncTransferFunding(handler func(*types.Receipt, error), opts *bind.TransactOpts, operatorAddr common.Address, addr common.Address, amount *big.Int, message string, createdDate string, endDate string) (*types.Transaction, error) {
	return _SupplyChain.contract.AsyncTransact(opts, handler, "transferFunding", operatorAddr, addr, amount, message, createdDate, endDate)
}

// TransferFunding is a paid mutator transaction binding the contract method 0xe4541186.
//
// Solidity: function transferFunding(address operatorAddr, address addr, uint256 amount, string message, string createdDate, string endDate) returns()
func (_SupplyChain *SupplyChainSession) TransferFunding(operatorAddr common.Address, addr common.Address, amount *big.Int, message string, createdDate string, endDate string) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.TransferFunding(&_SupplyChain.TransactOpts, operatorAddr, addr, amount, message, createdDate, endDate)
}

func (_SupplyChain *SupplyChainSession) AsyncTransferFunding(handler func(*types.Receipt, error), operatorAddr common.Address, addr common.Address, amount *big.Int, message string, createdDate string, endDate string) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncTransferFunding(handler, &_SupplyChain.TransactOpts, operatorAddr, addr, amount, message, createdDate, endDate)
}

// TransferFunding is a paid mutator transaction binding the contract method 0xe4541186.
//
// Solidity: function transferFunding(address operatorAddr, address addr, uint256 amount, string message, string createdDate, string endDate) returns()
func (_SupplyChain *SupplyChainTransactorSession) TransferFunding(operatorAddr common.Address, addr common.Address, amount *big.Int, message string, createdDate string, endDate string) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.TransferFunding(&_SupplyChain.TransactOpts, operatorAddr, addr, amount, message, createdDate, endDate)
}

func (_SupplyChain *SupplyChainTransactorSession) AsyncTransferFunding(handler func(*types.Receipt, error), operatorAddr common.Address, addr common.Address, amount *big.Int, message string, createdDate string, endDate string) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncTransferFunding(handler, &_SupplyChain.TransactOpts, operatorAddr, addr, amount, message, createdDate, endDate)
}

// WithdrawCredit is a paid mutator transaction binding the contract method 0x878bccd4.
//
// Solidity: function withdrawCredit(address operatorAddr, address addr, uint256 amount) returns()
func (_SupplyChain *SupplyChainTransactor) WithdrawCredit(opts *bind.TransactOpts, operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.contract.Transact(opts, "withdrawCredit", operatorAddr, addr, amount)
}

func (_SupplyChain *SupplyChainTransactor) AsyncWithdrawCredit(handler func(*types.Receipt, error), opts *bind.TransactOpts, operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyChain.contract.AsyncTransact(opts, handler, "withdrawCredit", operatorAddr, addr, amount)
}

// WithdrawCredit is a paid mutator transaction binding the contract method 0x878bccd4.
//
// Solidity: function withdrawCredit(address operatorAddr, address addr, uint256 amount) returns()
func (_SupplyChain *SupplyChainSession) WithdrawCredit(operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.WithdrawCredit(&_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

func (_SupplyChain *SupplyChainSession) AsyncWithdrawCredit(handler func(*types.Receipt, error), operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncWithdrawCredit(handler, &_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

// WithdrawCredit is a paid mutator transaction binding the contract method 0x878bccd4.
//
// Solidity: function withdrawCredit(address operatorAddr, address addr, uint256 amount) returns()
func (_SupplyChain *SupplyChainTransactorSession) WithdrawCredit(operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _SupplyChain.Contract.WithdrawCredit(&_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

func (_SupplyChain *SupplyChainTransactorSession) AsyncWithdrawCredit(handler func(*types.Receipt, error), operatorAddr common.Address, addr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyChain.Contract.AsyncWithdrawCredit(handler, &_SupplyChain.TransactOpts, operatorAddr, addr, amount)
}

// SupplyChainConfirmFinancingIterator is returned from FilterConfirmFinancing and is used to iterate over the raw logs and unpacked data for ConfirmFinancing events raised by the SupplyChain contract.
type SupplyChainConfirmFinancingIterator struct {
	Event *SupplyChainConfirmFinancing // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyChainConfirmFinancingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyChainConfirmFinancing)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyChainConfirmFinancing)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyChainConfirmFinancingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyChainConfirmFinancingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyChainConfirmFinancing represents a ConfirmFinancing event raised by the SupplyChain contract.
type SupplyChainConfirmFinancing struct {
	BankAddr common.Address
	TxID     *big.Int
	Accepted bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterConfirmFinancing is a free log retrieval operation binding the contract event 0xe79d31acf33b40a3c760929c8216dcb584c17d65bb04bee26ffc5e7d38e5c765.
//
// Solidity: event ConfirmFinancing(address bankAddr, uint256 txID, bool accepted)
func (_SupplyChain *SupplyChainFilterer) FilterConfirmFinancing(opts *bind.FilterOpts) (*SupplyChainConfirmFinancingIterator, error) {

	logs, sub, err := _SupplyChain.contract.FilterLogs(opts, "ConfirmFinancing")
	if err != nil {
		return nil, err
	}
	return &SupplyChainConfirmFinancingIterator{contract: _SupplyChain.contract, event: "ConfirmFinancing", logs: logs, sub: sub}, nil
}

// WatchConfirmFinancing is a free log subscription operation binding the contract event 0xe79d31acf33b40a3c760929c8216dcb584c17d65bb04bee26ffc5e7d38e5c765.
//
// Solidity: event ConfirmFinancing(address bankAddr, uint256 txID, bool accepted)
func (_SupplyChain *SupplyChainFilterer) WatchConfirmFinancing(opts *bind.WatchOpts, sink chan<- *SupplyChainConfirmFinancing) (event.Subscription, error) {

	logs, sub, err := _SupplyChain.contract.WatchLogs(opts, "ConfirmFinancing")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyChainConfirmFinancing)
				if err := _SupplyChain.contract.UnpackLog(event, "ConfirmFinancing", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmFinancing is a log parse operation binding the contract event 0xe79d31acf33b40a3c760929c8216dcb584c17d65bb04bee26ffc5e7d38e5c765.
//
// Solidity: event ConfirmFinancing(address bankAddr, uint256 txID, bool accepted)
func (_SupplyChain *SupplyChainFilterer) ParseConfirmFinancing(log types.Log) (*SupplyChainConfirmFinancing, error) {
	event := new(SupplyChainConfirmFinancing)
	if err := _SupplyChain.contract.UnpackLog(event, "ConfirmFinancing", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SupplyChainFinancingIterator is returned from FilterFinancing and is used to iterate over the raw logs and unpacked data for Financing events raised by the SupplyChain contract.
type SupplyChainFinancingIterator struct {
	Event *SupplyChainFinancing // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyChainFinancingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyChainFinancing)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyChainFinancing)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyChainFinancingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyChainFinancingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyChainFinancing represents a Financing event raised by the SupplyChain contract.
type SupplyChainFinancing struct {
	OperatorAddr common.Address
	BankAddr     common.Address
	UseBill      bool
	Message      string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterFinancing is a free log retrieval operation binding the contract event 0xfff3b48a1917b000cf296ad31b015e27d07230fa4d5388486619058a5d83eb07.
//
// Solidity: event Financing(address operatorAddr, address bankAddr, bool useBill, string message)
func (_SupplyChain *SupplyChainFilterer) FilterFinancing(opts *bind.FilterOpts) (*SupplyChainFinancingIterator, error) {

	logs, sub, err := _SupplyChain.contract.FilterLogs(opts, "Financing")
	if err != nil {
		return nil, err
	}
	return &SupplyChainFinancingIterator{contract: _SupplyChain.contract, event: "Financing", logs: logs, sub: sub}, nil
}

// WatchFinancing is a free log subscription operation binding the contract event 0xfff3b48a1917b000cf296ad31b015e27d07230fa4d5388486619058a5d83eb07.
//
// Solidity: event Financing(address operatorAddr, address bankAddr, bool useBill, string message)
func (_SupplyChain *SupplyChainFilterer) WatchFinancing(opts *bind.WatchOpts, sink chan<- *SupplyChainFinancing) (event.Subscription, error) {

	logs, sub, err := _SupplyChain.contract.WatchLogs(opts, "Financing")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyChainFinancing)
				if err := _SupplyChain.contract.UnpackLog(event, "Financing", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinancing is a log parse operation binding the contract event 0xfff3b48a1917b000cf296ad31b015e27d07230fa4d5388486619058a5d83eb07.
//
// Solidity: event Financing(address operatorAddr, address bankAddr, bool useBill, string message)
func (_SupplyChain *SupplyChainFilterer) ParseFinancing(log types.Log) (*SupplyChainFinancing, error) {
	event := new(SupplyChainFinancing)
	if err := _SupplyChain.contract.UnpackLog(event, "Financing", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SupplyChainProvideCreditIterator is returned from FilterProvideCredit and is used to iterate over the raw logs and unpacked data for ProvideCredit events raised by the SupplyChain contract.
type SupplyChainProvideCreditIterator struct {
	Event *SupplyChainProvideCredit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyChainProvideCreditIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyChainProvideCredit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyChainProvideCredit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyChainProvideCreditIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyChainProvideCreditIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyChainProvideCredit represents a ProvideCredit event raised by the SupplyChain contract.
type SupplyChainProvideCredit struct {
	OperatorAddr common.Address
	Addr         common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterProvideCredit is a free log retrieval operation binding the contract event 0xc3b952b72784be55bb8e32fd09dfac85c3fa37c83f24ca841b4ee68f6631bd15.
//
// Solidity: event ProvideCredit(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) FilterProvideCredit(opts *bind.FilterOpts) (*SupplyChainProvideCreditIterator, error) {

	logs, sub, err := _SupplyChain.contract.FilterLogs(opts, "ProvideCredit")
	if err != nil {
		return nil, err
	}
	return &SupplyChainProvideCreditIterator{contract: _SupplyChain.contract, event: "ProvideCredit", logs: logs, sub: sub}, nil
}

// WatchProvideCredit is a free log subscription operation binding the contract event 0xc3b952b72784be55bb8e32fd09dfac85c3fa37c83f24ca841b4ee68f6631bd15.
//
// Solidity: event ProvideCredit(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) WatchProvideCredit(opts *bind.WatchOpts, sink chan<- *SupplyChainProvideCredit) (event.Subscription, error) {

	logs, sub, err := _SupplyChain.contract.WatchLogs(opts, "ProvideCredit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyChainProvideCredit)
				if err := _SupplyChain.contract.UnpackLog(event, "ProvideCredit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProvideCredit is a log parse operation binding the contract event 0xc3b952b72784be55bb8e32fd09dfac85c3fa37c83f24ca841b4ee68f6631bd15.
//
// Solidity: event ProvideCredit(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) ParseProvideCredit(log types.Log) (*SupplyChainProvideCredit, error) {
	event := new(SupplyChainProvideCredit)
	if err := _SupplyChain.contract.UnpackLog(event, "ProvideCredit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SupplyChainProvideFundingIterator is returned from FilterProvideFunding and is used to iterate over the raw logs and unpacked data for ProvideFunding events raised by the SupplyChain contract.
type SupplyChainProvideFundingIterator struct {
	Event *SupplyChainProvideFunding // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyChainProvideFundingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyChainProvideFunding)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyChainProvideFunding)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyChainProvideFundingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyChainProvideFundingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyChainProvideFunding represents a ProvideFunding event raised by the SupplyChain contract.
type SupplyChainProvideFunding struct {
	OperatorAddr common.Address
	Addr         common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterProvideFunding is a free log retrieval operation binding the contract event 0x30d1aa03731c66472532a76cc4916b051b3a8e7b6d83e3ab253aba86a16cca52.
//
// Solidity: event ProvideFunding(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) FilterProvideFunding(opts *bind.FilterOpts) (*SupplyChainProvideFundingIterator, error) {

	logs, sub, err := _SupplyChain.contract.FilterLogs(opts, "ProvideFunding")
	if err != nil {
		return nil, err
	}
	return &SupplyChainProvideFundingIterator{contract: _SupplyChain.contract, event: "ProvideFunding", logs: logs, sub: sub}, nil
}

// WatchProvideFunding is a free log subscription operation binding the contract event 0x30d1aa03731c66472532a76cc4916b051b3a8e7b6d83e3ab253aba86a16cca52.
//
// Solidity: event ProvideFunding(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) WatchProvideFunding(opts *bind.WatchOpts, sink chan<- *SupplyChainProvideFunding) (event.Subscription, error) {

	logs, sub, err := _SupplyChain.contract.WatchLogs(opts, "ProvideFunding")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyChainProvideFunding)
				if err := _SupplyChain.contract.UnpackLog(event, "ProvideFunding", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProvideFunding is a log parse operation binding the contract event 0x30d1aa03731c66472532a76cc4916b051b3a8e7b6d83e3ab253aba86a16cca52.
//
// Solidity: event ProvideFunding(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) ParseProvideFunding(log types.Log) (*SupplyChainProvideFunding, error) {
	event := new(SupplyChainProvideFunding)
	if err := _SupplyChain.contract.UnpackLog(event, "ProvideFunding", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SupplyChainRegistrationIterator is returned from FilterRegistration and is used to iterate over the raw logs and unpacked data for Registration events raised by the SupplyChain contract.
type SupplyChainRegistrationIterator struct {
	Event *SupplyChainRegistration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyChainRegistrationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyChainRegistration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyChainRegistration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyChainRegistrationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyChainRegistrationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyChainRegistration represents a Registration event raised by the SupplyChain contract.
type SupplyChainRegistration struct {
	OperatorAddr common.Address
	Addr         common.Address
	Role         string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRegistration is a free log retrieval operation binding the contract event 0x7b397ec0a314d8052fc895627f585c1a23e7d3a571e85fda02548b42cd6a8631.
//
// Solidity: event Registration(address operatorAddr, address addr, string role)
func (_SupplyChain *SupplyChainFilterer) FilterRegistration(opts *bind.FilterOpts) (*SupplyChainRegistrationIterator, error) {

	logs, sub, err := _SupplyChain.contract.FilterLogs(opts, "Registration")
	if err != nil {
		return nil, err
	}
	return &SupplyChainRegistrationIterator{contract: _SupplyChain.contract, event: "Registration", logs: logs, sub: sub}, nil
}

// WatchRegistration is a free log subscription operation binding the contract event 0x7b397ec0a314d8052fc895627f585c1a23e7d3a571e85fda02548b42cd6a8631.
//
// Solidity: event Registration(address operatorAddr, address addr, string role)
func (_SupplyChain *SupplyChainFilterer) WatchRegistration(opts *bind.WatchOpts, sink chan<- *SupplyChainRegistration) (event.Subscription, error) {

	logs, sub, err := _SupplyChain.contract.WatchLogs(opts, "Registration")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyChainRegistration)
				if err := _SupplyChain.contract.UnpackLog(event, "Registration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistration is a log parse operation binding the contract event 0x7b397ec0a314d8052fc895627f585c1a23e7d3a571e85fda02548b42cd6a8631.
//
// Solidity: event Registration(address operatorAddr, address addr, string role)
func (_SupplyChain *SupplyChainFilterer) ParseRegistration(log types.Log) (*SupplyChainRegistration, error) {
	event := new(SupplyChainRegistration)
	if err := _SupplyChain.contract.UnpackLog(event, "Registration", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SupplyChainRepayIterator is returned from FilterRepay and is used to iterate over the raw logs and unpacked data for Repay events raised by the SupplyChain contract.
type SupplyChainRepayIterator struct {
	Event *SupplyChainRepay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyChainRepayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyChainRepay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyChainRepay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyChainRepayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyChainRepayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyChainRepay represents a Repay event raised by the SupplyChain contract.
type SupplyChainRepay struct {
	OperatorAddr common.Address
	Addr         common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRepay is a free log retrieval operation binding the contract event 0x05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac4684.
//
// Solidity: event Repay(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) FilterRepay(opts *bind.FilterOpts) (*SupplyChainRepayIterator, error) {

	logs, sub, err := _SupplyChain.contract.FilterLogs(opts, "Repay")
	if err != nil {
		return nil, err
	}
	return &SupplyChainRepayIterator{contract: _SupplyChain.contract, event: "Repay", logs: logs, sub: sub}, nil
}

// WatchRepay is a free log subscription operation binding the contract event 0x05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac4684.
//
// Solidity: event Repay(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) WatchRepay(opts *bind.WatchOpts, sink chan<- *SupplyChainRepay) (event.Subscription, error) {

	logs, sub, err := _SupplyChain.contract.WatchLogs(opts, "Repay")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyChainRepay)
				if err := _SupplyChain.contract.UnpackLog(event, "Repay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepay is a log parse operation binding the contract event 0x05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac4684.
//
// Solidity: event Repay(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) ParseRepay(log types.Log) (*SupplyChainRepay, error) {
	event := new(SupplyChainRepay)
	if err := _SupplyChain.contract.UnpackLog(event, "Repay", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SupplyChainTransferBillIterator is returned from FilterTransferBill and is used to iterate over the raw logs and unpacked data for TransferBill events raised by the SupplyChain contract.
type SupplyChainTransferBillIterator struct {
	Event *SupplyChainTransferBill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyChainTransferBillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyChainTransferBill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyChainTransferBill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyChainTransferBillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyChainTransferBillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyChainTransferBill represents a TransferBill event raised by the SupplyChain contract.
type SupplyChainTransferBill struct {
	OperatorAddr common.Address
	From         common.Address
	NewTo        common.Address
	BillID       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTransferBill is a free log retrieval operation binding the contract event 0xe4c87ae3bb676e828ebe386951a15b163e6f61b1cd62a2b7fddde86eaead6792.
//
// Solidity: event TransferBill(address operatorAddr, address from, address newTo, uint256 billID)
func (_SupplyChain *SupplyChainFilterer) FilterTransferBill(opts *bind.FilterOpts) (*SupplyChainTransferBillIterator, error) {

	logs, sub, err := _SupplyChain.contract.FilterLogs(opts, "TransferBill")
	if err != nil {
		return nil, err
	}
	return &SupplyChainTransferBillIterator{contract: _SupplyChain.contract, event: "TransferBill", logs: logs, sub: sub}, nil
}

// WatchTransferBill is a free log subscription operation binding the contract event 0xe4c87ae3bb676e828ebe386951a15b163e6f61b1cd62a2b7fddde86eaead6792.
//
// Solidity: event TransferBill(address operatorAddr, address from, address newTo, uint256 billID)
func (_SupplyChain *SupplyChainFilterer) WatchTransferBill(opts *bind.WatchOpts, sink chan<- *SupplyChainTransferBill) (event.Subscription, error) {

	logs, sub, err := _SupplyChain.contract.WatchLogs(opts, "TransferBill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyChainTransferBill)
				if err := _SupplyChain.contract.UnpackLog(event, "TransferBill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBill is a log parse operation binding the contract event 0xe4c87ae3bb676e828ebe386951a15b163e6f61b1cd62a2b7fddde86eaead6792.
//
// Solidity: event TransferBill(address operatorAddr, address from, address newTo, uint256 billID)
func (_SupplyChain *SupplyChainFilterer) ParseTransferBill(log types.Log) (*SupplyChainTransferBill, error) {
	event := new(SupplyChainTransferBill)
	if err := _SupplyChain.contract.UnpackLog(event, "TransferBill", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SupplyChainTransferFundingIterator is returned from FilterTransferFunding and is used to iterate over the raw logs and unpacked data for TransferFunding events raised by the SupplyChain contract.
type SupplyChainTransferFundingIterator struct {
	Event *SupplyChainTransferFunding // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyChainTransferFundingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyChainTransferFunding)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyChainTransferFunding)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyChainTransferFundingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyChainTransferFundingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyChainTransferFunding represents a TransferFunding event raised by the SupplyChain contract.
type SupplyChainTransferFunding struct {
	OperatorAddr common.Address
	To           common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTransferFunding is a free log retrieval operation binding the contract event 0x9beb5cb4613379e2b4a694d8c7e845bcb9491b35738dade9f5ec68f8c020e28e.
//
// Solidity: event TransferFunding(address operatorAddr, address to, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) FilterTransferFunding(opts *bind.FilterOpts) (*SupplyChainTransferFundingIterator, error) {

	logs, sub, err := _SupplyChain.contract.FilterLogs(opts, "TransferFunding")
	if err != nil {
		return nil, err
	}
	return &SupplyChainTransferFundingIterator{contract: _SupplyChain.contract, event: "TransferFunding", logs: logs, sub: sub}, nil
}

// WatchTransferFunding is a free log subscription operation binding the contract event 0x9beb5cb4613379e2b4a694d8c7e845bcb9491b35738dade9f5ec68f8c020e28e.
//
// Solidity: event TransferFunding(address operatorAddr, address to, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) WatchTransferFunding(opts *bind.WatchOpts, sink chan<- *SupplyChainTransferFunding) (event.Subscription, error) {

	logs, sub, err := _SupplyChain.contract.WatchLogs(opts, "TransferFunding")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyChainTransferFunding)
				if err := _SupplyChain.contract.UnpackLog(event, "TransferFunding", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferFunding is a log parse operation binding the contract event 0x9beb5cb4613379e2b4a694d8c7e845bcb9491b35738dade9f5ec68f8c020e28e.
//
// Solidity: event TransferFunding(address operatorAddr, address to, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) ParseTransferFunding(log types.Log) (*SupplyChainTransferFunding, error) {
	event := new(SupplyChainTransferFunding)
	if err := _SupplyChain.contract.UnpackLog(event, "TransferFunding", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SupplyChainWithdrawCreditIterator is returned from FilterWithdrawCredit and is used to iterate over the raw logs and unpacked data for WithdrawCredit events raised by the SupplyChain contract.
type SupplyChainWithdrawCreditIterator struct {
	Event *SupplyChainWithdrawCredit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyChainWithdrawCreditIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyChainWithdrawCredit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyChainWithdrawCredit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyChainWithdrawCreditIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyChainWithdrawCreditIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyChainWithdrawCredit represents a WithdrawCredit event raised by the SupplyChain contract.
type SupplyChainWithdrawCredit struct {
	OperatorAddr common.Address
	Addr         common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterWithdrawCredit is a free log retrieval operation binding the contract event 0x9227dc79fe780bff2822c28f577c31781fcb2662e591e4f2cb7b6e8fde6a7f85.
//
// Solidity: event WithdrawCredit(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) FilterWithdrawCredit(opts *bind.FilterOpts) (*SupplyChainWithdrawCreditIterator, error) {

	logs, sub, err := _SupplyChain.contract.FilterLogs(opts, "WithdrawCredit")
	if err != nil {
		return nil, err
	}
	return &SupplyChainWithdrawCreditIterator{contract: _SupplyChain.contract, event: "WithdrawCredit", logs: logs, sub: sub}, nil
}

// WatchWithdrawCredit is a free log subscription operation binding the contract event 0x9227dc79fe780bff2822c28f577c31781fcb2662e591e4f2cb7b6e8fde6a7f85.
//
// Solidity: event WithdrawCredit(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) WatchWithdrawCredit(opts *bind.WatchOpts, sink chan<- *SupplyChainWithdrawCredit) (event.Subscription, error) {

	logs, sub, err := _SupplyChain.contract.WatchLogs(opts, "WithdrawCredit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyChainWithdrawCredit)
				if err := _SupplyChain.contract.UnpackLog(event, "WithdrawCredit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawCredit is a log parse operation binding the contract event 0x9227dc79fe780bff2822c28f577c31781fcb2662e591e4f2cb7b6e8fde6a7f85.
//
// Solidity: event WithdrawCredit(address operatorAddr, address addr, uint256 amount)
func (_SupplyChain *SupplyChainFilterer) ParseWithdrawCredit(log types.Log) (*SupplyChainWithdrawCredit, error) {
	event := new(SupplyChainWithdrawCredit)
	if err := _SupplyChain.contract.UnpackLog(event, "WithdrawCredit", log); err != nil {
		return nil, err
	}
	return event, nil
}
